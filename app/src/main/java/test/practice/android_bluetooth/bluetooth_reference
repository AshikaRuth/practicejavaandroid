
REfer basics : https://www.bluetooth.com/what-is-bluetooth-technology/how-it-works
REfere android : https://developer.android.com/guide/topics/connectivity/bluetooth.html

Basic : https://www.bluetooth.com/what-is-bluetooth-technology/how-it-works

Bluetooth : Android

1) Communication is done through radio signal.
2) Can have one-to-one and one-to-many peer connection.
3)Using the Bluetooth APIs, an Android application can perform the following:

  Scan for other Bluetooth devices
  Query the local Bluetooth adapter for paired Bluetooth devices
  Establish RFCOMM channels
  Connect to other devices through service discovery
  Transfer data to and from other devices
  Manage multiple connections

4) Permission

BLUETOOTH

added in API level 1
String BLUETOOTH
Allows applications to connect to paired bluetooth devices.
Protection level: normal
Constant Value: "android.permission.BLUETOOTH"

BLUETOOTH_ADMIN

added in API level 1
String BLUETOOTH_ADMIN
Allows applications to discover and pair bluetooth devices.
Protection level: normal
Constant Value: "android.permission.BLUETOOTH_ADMIN"

BLUETOOTH_PRIVILEGED

added in API level 19
String BLUETOOTH_PRIVILEGED
Allows applications to pair bluetooth devices without user interaction, and to allow or disallow phonebook access or message access. This is not available to third party applications.
Constant Value: "android.permission.BLUETOOTH_PRIVILEGED"


5) Pairing Process :

a)One device, a discoverable device, makes itself available for incoming connection requests.
b)Another device finds the discoverable device using a service discovery process.
c)After the discoverable device accepts the pairing request, the two devices complete a bonding process where they exchange
security keys. The devices cache these keys for later use.
d)After the pairing and bonding processes are complete, the two devices exchange information.
e)When the session is complete, the device that initiated the pairing request releases the channel that had linked it to the
discoverable device.


6) Connection techniques : If you want to communicate between two devices.

a)One implementation technique is to automatically prepare each device as a server so that each device has a server socket
open and listening for connections. In this case, either device can initiate a connection with the other and become the client.
Alternatively, one device can explicitly host the connection and open a server socket on demand, and the other device initiates
the connection.

b) Note: If the two devices have not been previously paired, then the Android framework automatically shows a pairing
request notification or dialog to the user during the connection procedure, as shown in Figure 3. Therefore, when your
application attempts to connect devices, it doesn't need to be concerned about whether or not the devices are paired.
Your RFCOMM connection attempt will block until the user has successfully paired the two devices, and the attempt fails
if the user rejects pairing, or if the pairing process fails or times out.

7)Connecting as a server

When you want to connect two devices, one must act as a server by holding an open BluetoothServerSocket. The purpose of the
server socket is to listen for incoming connection requests and provide a connected BluetoothSocket after a request is accepted.
When the BluetoothSocket is acquired from the BluetoothServerSocket, the BluetoothServerSocket can—and should—be discarded,
unless you want the device to accept more connections.

BluetoothServerSocket & BluetoothSocket
Refer : https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html

Acually get a view point as below :

 |                      |        Bluetooth socket is RFCOMM (SPP)       |1) open connection available   |
 | Server Side Bluetooth|     <-------------------------------------    | Client Side Bluetooth         |
 |  (Mobile Device)     |                                               |  (Beacon Device)              |
 |                      |                                               |                               |

 2) Dialoge will be shown for
 pairing request at Server. Accepted : Yes
 Basically at server side :
  use a BluetoothServerSocket to create a
  listening server socket

 3) BluetoothSocket to both initiate an outgoing connection and to manage the connection.

BluetoothSocket: Client (Beacon)
A connected or connecting Bluetooth socket.
 1) On the server side, use a BluetoothServerSocket to create a listening server socket. When a connection is accepted by
 the BluetoothServerSocket, it will return a new BluetoothSocket to manage the connection. On the client side, use a single
 BluetoothSocket to both initiate an outgoing connection and to manage the connection.
 The most common type of Bluetooth socket is RFCOMM, which is the type supported by the Android APIs.
 RFCOMM is a connection-oriented, streaming transport over Bluetooth. It is also known as the Serial Port Profile (SPP).

BluetoothServerSocket : Server (Mobile)
A listening Bluetooth socket.
 1)To create a listening BluetoothServerSocket that's ready for incoming connections, use BluetoothAdapter.listenUsingRfcommWithServiceRecord().
 2)Then call accept() to listen for incoming connection requests. This call will block until a connection is established,
 at which point, it will return a BluetoothSocket to manage the connection.
 3)Once the BluetoothSocket is acquired, it's a good idea to call close() on the BluetoothServerSocket when it's no longer
 needed for accepting connections. Closing the BluetoothServerSocket will not close the returned BluetoothSocket.
 4)BluetoothServerSocket is thread safe. In particular, close() (Completely) will always immediately abort ongoing operations and
 close the server socket.

5)Example
Here's a simplified thread for the server component that accepts incoming connections:

private class AcceptThread extends Thread {
    private final BluetoothServerSocket mmServerSocket;

    public AcceptThread() {
        // Use a temporary object that is later assigned to mmServerSocket
        // because mmServerSocket is final.
        BluetoothServerSocket tmp = null;
        try {
            // MY_UUID is the app's UUID string, also used by the client code.
            tmp = mBluetoothAdapter.listenUsingRfcommWithServiceRecord(NAME, MY_UUID);
        } catch (IOException e) {
            Log.e(TAG, "Socket's listen() method failed", e);
        }
        mmServerSocket = tmp;
    }

    public void run() {
        BluetoothSocket socket = null;
        // Keep listening until exception occurs or a socket is returned.
        while (true) {
            try {
                socket = mmServerSocket.accept();
            } catch (IOException e) {
                Log.e(TAG, "Socket's accept() method failed", e);
                break;
            }

            if (socket != null) {
                // A connection was accepted. Perform work associated with
                // the connection in a separate thread.
                manageMyConnectedSocket(socket);
                mmServerSocket.close();
                break;
            }
        }
    }

    // Closes the connect socket and causes the thread to finish.
        public void cancel() {
        try {
            mmServerSocket.close();
        } catch (IOException e) {
            Log.e(TAG, "Could not close the connect socket", e);
        }
    }
}

6) Finding Device :
Using the BluetoothAdapter, you can find remote Bluetooth devices either through device discovery or by querying the list of
paired devices.
Device discovery is a scanning procedure that searches the local area for Bluetooth-enabled devices and requests some
information about each one. This process is sometimes referred to as discovering, inquiring, or scanning. However,
a nearby Bluetooth device responds to a discovery request only if it is currently accepting information requests by
being discoverable. If a device is discoverable, it will respond to the discovery request by sharing some information,
such as the device's name, its class, and its unique MAC address. Using this information, the device that is performing the
discovery process can then choose to initiate a connection to the discovered device.
Once a connection is made with a remote device for the first time, a pairing request is automatically presented to the user.
When a device is paired, the basic information about that device—such as the device's name, class, and MAC address—is saved
and can be read using the Bluetooth APIs. Using the known MAC address for a remote device, a connection can be initiated with
it at any time without performing discovery, assuming the device is still within range.

Note that there is a difference between being paired and being connected:

To be paired means that two devices are aware of each other's existence, have a shared link-key that can be used for authentication, and are capable of establishing an encrypted connection with each other.
To be connected means that the devices currently share an RFCOMM channel and are able to transmit data with each other. The current Android Bluetooth API's require devices to be paired before an RFCOMM connection can be established. Pairing is automatically performed when you initiate an encrypted connection with the Bluetooth APIs.



8) Connecting as a Client :

The basic procedure is as follows:

Using the BluetoothDevice, get a BluetoothSocket by calling createRfcommSocketToServiceRecord(UUID).
This method initializes a BluetoothSocket object that allows the client to connect to a BluetoothDevice. The UUID passed here
must match the UUID used by the server device when it called listenUsingRfcommWithServiceRecord(String, UUID) to open its
BluetoothServerSocket. To use a matching UUID, hard-code the UUID string into your application, and then reference it from both
the server and client code.
Initiate the connection by calling connect(). Note that this method is a blocking call.
After a client calls this method, the system performs an SDP lookup to find the remote device with the matching UUID.
If the lookup is successful and the remote device accepts the connection, it shares the RFCOMM channel to use during the
connection, and the connect() method returns. If the connection fails, or if the connect() method times out
(after about 12 seconds), then the method throws an IOException.
Because connect() is a blocking call, you should always perform this connection procedure in a thread that is separate
from the main activity (UI) thread.
Note: You should always call cancelDiscovery() to ensure that the device is not performing device discovery before you call
connect(). If discovery is in progress, then the connection attempt is significantly slowed, and it's more likely to fail.

Example
Here is a basic example of a client thread that initiates a Bluetooth connection:

private class ConnectThread extends Thread {
    private final BluetoothSocket mmSocket;
    private final BluetoothDevice mmDevice;

    public ConnectThread(BluetoothDevice device) {
        // Use a temporary object that is later assigned to mmSocket
        // because mmSocket is final.
        BluetoothSocket tmp = null;
        mmDevice = device;

        try {
            // Get a BluetoothSocket to connect with the given BluetoothDevice.
            // MY_UUID is the app's UUID string, also used in the server code.
            tmp = device.createRfcommSocketToServiceRecord(MY_UUID);
        } catch (IOException e) {
            Log.e(TAG, "Socket's create() method failed", e);
        }
        mmSocket = tmp;
    }

    public void run() {
        // Cancel discovery because it otherwise slows down the connection.
        mBluetoothAdapter.cancelDiscovery();

        try {
            // Connect to the remote device through the socket. This call blocks
            // until it succeeds or throws an exception.
            mmSocket.connect();
        } catch (IOException connectException) {
            // Unable to connect; close the socket and return.
            try {
                mmSocket.close();
            } catch (IOException closeException) {
                Log.e(TAG, "Could not close the client socket", closeException);
            }
            return;
        }

        // The connection attempt succeeded. Perform work associated with
        // the connection in a separate thread.
        manageMyConnectedSocket(mmSocket);
    }

    // Closes the client socket and causes the thread to finish.
    public void cancel() {
        try {
            mmSocket.close();
        } catch (IOException e) {
            Log.e(TAG, "Could not close the client socket", e);
        }
    }
}



9) Managing a Connection : Comminication Between Devices (Fun Begins) :

After you have successfully connected multiple devices, each one has a connected BluetoothSocket. This is where the
fun begins because you can share information between devices. Using the BluetoothSocket, the general procedure to
transfer data is as follows:

a)Get the InputStream and OutputStream that handle transmissions through the socket using getInputStream() and getOutputStream(),
respectively.
b)Read and write data to the streams using read(byte[]) and write(byte[]).

There are, of course, implementation details to consider. In particular, you should use a dedicated thread for reading
from the stream and writing to it. This is important because both the read(byte[]) and write(byte[]) methods are blocking
calls. The read(byte[]) method blocks until there is something to read from the stream. The write(byte[]) method doesn't
usually block, but it can block for flow control if the remote device is not calling read(byte[]) quickly enough and the
intermediate buffers become full as a result. So, your main loop in the thread should be dedicated to reading from the
InputStream. A separate public method in the thread can be used to initiate writes to the OutputStream.

Example
Here's an example of how you can transfer data between two devices connected over Bluetooth:

public class MyBluetoothService {
    private static final String TAG = "MY_APP_DEBUG_TAG";
    private Handler mHandler; // handler that gets info from Bluetooth service

    // Defines several constants used when transmitting messages between the
    // service and the UI.
    private interface MessageConstants {
        public static final int MESSAGE_READ = 0;
        public static final int MESSAGE_WRITE = 1;
        public static final int MESSAGE_TOAST = 2;

        // ... (Add other message types here as needed.)
    }

    private class ConnectedThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final InputStream mmInStream;
        private final OutputStream mmOutStream;
        private byte[] mmBuffer; // mmBuffer store for the stream

        public ConnectedThread(BluetoothSocket socket) {
            mmSocket = socket;
            InputStream tmpIn = null;
            OutputStream tmpOut = null;

            // Get the input and output streams; using temp objects because
            // member streams are final.
            try {
                tmpIn = socket.getInputStream();
            } catch (IOException e) {
                Log.e(TAG, "Error occurred when creating input stream", e);
            }
            try {
                tmpOut = socket.getOutputStream();
            } catch (IOException e) {
                Log.e(TAG, "Error occurred when creating output stream", e);
            }

            mmInStream = tmpIn;
            mmOutStream = tmpOut;
        }

        public void run() {
            mmBuffer = new byte[1024];
            int numBytes; // bytes returned from read()

            // Keep listening to the InputStream until an exception occurs.
            while (true) {
                try {
                    // Read from the InputStream.
                    numBytes = mmInStream.read(mmBuffer);
                    // Send the obtained bytes to the UI activity.
                    Message readMsg = mHandler.obtainMessage(
                            MessageConstants.MESSAGE_READ, numBytes, -1,
                            mmBuffer);
                    readMsg.sendToTarget();
                } catch (IOException e) {
                    Log.d(TAG, "Input stream was disconnected", e);
                    break;
                }
            }
        }

        // Call this from the main activity to send data to the remote device.
        public void write(byte[] bytes) {
            try {
                mmOutStream.write(bytes);

                // Share the sent message with the UI activity.
                Message writtenMsg = mHandler.obtainMessage(
                        MessageConstants.MESSAGE_WRITE, -1, -1, mmBuffer);
                writtenMsg.sendToTarget();
            } catch (IOException e) {
                Log.e(TAG, "Error occurred when sending data", e);

                // Send a failure message back to the activity.
                Message writeErrorMsg =
                        mHandler.obtainMessage(MessageConstants.MESSAGE_TOAST);
                Bundle bundle = new Bundle();
                bundle.putString("toast",
                        "Couldn't send data to the other device");
                writeErrorMsg.setData(bundle);
                mHandler.sendMessage(writeErrorMsg);
            }
        }

        // Call this method from the main activity to shut down the connection.
        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException e) {
                Log.e(TAG, "Could not close the connect socket", e);
            }
        }
    }
}